{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Welcome to Python for Neuroimaging!","text":""},{"location":"#a-brief-history","title":"A brief history","text":"<p>Python  is a high-level, interpreted language created by  Guido van Rossum. </p>"},{"location":"#2-to-3","title":"2 to 3","text":"<p>Python has undergone three major revisions since it's initial release back in  1991. The most recent revision was Python 2 to 3. Python 2 still exists, but  was officially deprecated on January 1st, 2020.</p>"},{"location":"#the-interpreter","title":"The interpreter","text":"<p>Instead of having to compile  source code into  machine code, Python executes your code one line at a time using an  interpreter.</p>"},{"location":"#starting-the-interpreter","title":"starting the interpreter","text":"<p>Python should be installed by default on most Linux and macOS systems. To start  the interpreter, simply open a terminal and type <code>python</code> or <code>python3</code> at the  command prompt and hit Enter</p> <pre><code>% python\nPython 3.8.2 (default, Mar 26 2020, 15:43:04) \n[Clang 11.0.3 (clang-1103.0.32.29)] on darwin\nType \"help\", \"copyright\", \"credits\" or \"license\" for more information.\n&gt;&gt;&gt; \n</code></pre> <p>Command not found</p> <p>If you receive a <code>command not found</code> error, either your system does  not have Python installed, or your environment is misconfigured. Try logging into a FASSE host and use one of the existing Python modules</p> <pre><code>module load ncf\nmodule load miniconda3/py39_4.11.0-ncf\n</code></pre> <p>If that doesn't work,  contact a system administrator.</p>"},{"location":"#executing-statements","title":"executing statements","text":"<p>You can execute statements interactively by typing a statement at the prompt  <code>&gt;&gt;&gt;</code> and pressing Enter</p> <pre><code>&gt;&gt;&gt; 1 + 1\n2\n&gt;&gt;&gt;\n</code></pre> <p>Python will read the input statement, evaluate it, print the result, and loop  back to the command prompt. This is known as a  read-evaluate-print-loop or REPL.</p>"},{"location":"#comments","title":"comments","text":"<p>Comments begin with a hash <code>#</code> and will be ignored</p> <pre><code>&gt;&gt;&gt; # this is a comment\n</code></pre> <p>For multi-line comments, you can use multiple hash <code>#</code> characters or triple  quotation marks (single or double quotes work)</p> <pre><code>\"\"\"\nI am\na multiline\ncomment\n\"\"\"\n</code></pre>"},{"location":"#quitting","title":"quitting","text":"<p>To quit the Python interpreter, type Control +  D or execute the <code>quit()</code> or <code>exit()</code> functions</p> <pre><code>&gt;&gt;&gt; quit()\n</code></pre>"},{"location":"basics/","title":"Variables, assignment, and types","text":"<p>This may seem a bit elementary, but let's review how to define variables and go  over the various  primitive types in Python.</p>"},{"location":"basics/#defining-a-variable","title":"Defining a variable","text":"<p>Enter the following statement at the Python command prompt <code>&gt;&gt;&gt;</code> to define the  variable <code>pi</code></p> <pre><code>pi = 3.1415\n</code></pre> <p>Note that you do not need to use <code>let</code>, <code>var</code>, or provide any type hinting  keywords before a variable declaration. You also don't need a semicolon  at the end of each statement.</p>"},{"location":"basics/#defining-a-variable-from-an-expression","title":"defining a variable from an expression","text":"<p>The right side of a variable assignment does not need to be a static value. It  can be an expression</p> <pre><code>a = 1 + 1\n</code></pre> <p>Python will evaluate the right side of the assignment operator and send the  result to the left. This left-right associative property allows you to use an  existing variable to redefine itself</p> <pre><code>a = a + 1\n</code></pre>"},{"location":"basics/#primitive-types","title":"Primitive types","text":"<p>Python includes several low-level primitive data types such as integers  <code>int</code>, decimals <code>float</code>, strings <code>str</code>, booleans <code>bool</code>, and null <code>None</code></p> <pre><code>a = 1                               # int\nb = 3.14                            # float\nc = \"I'm a double quoted string\"    # str\nd = 'I\\'m a single quoted string'   # str\ne = True                            # bool\nf = False                           # bool\ng = None                            # None\n</code></pre> <p>Should I define strings use single or double quotes</p> <p>Using single or double quotes is mostly a stylistic choice. However, if  you intend to use a single quote within a single-quoted string, or a  double quote within a double-quoted string, you'll need to escape the  embedded quote with a backslash <code>\\</code> character as shown above.</p>"},{"location":"basics/#checking-types","title":"Checking types","text":"<p>You can check the type of a variable or its  class at any time by passing it to the built-in <code>type()</code> function.</p> <pre><code>type(a)\n</code></pre>"},{"location":"cli/","title":"Writing command line tools","text":"<p>To write a command line tool in Python, open a new plain text file named  <code>hello.py</code> and enter the following contents</p> <pre><code>#!/usr/bin/env python\n\nprint('Hello, World!')\n</code></pre> <p>Save the file and make it executable by executing the following shell command</p> <pre><code>% chmod u+x hello.py\n</code></pre> <p>Now you can execute your script from the command line</p> <pre><code>% ./hello.py\nHello, World!\n</code></pre>"},{"location":"cli/#command-line-arguments","title":"Command line arguments","text":"<p>Imagine that you want to write a script to download data from your local  XNAT installation. You'll need to accept the command line arguments <code>--hostname</code>,  <code>--session</code>, and <code>--output-dir</code></p> <pre><code>% ./download.py --hostname xnat.example.com  \\\n--session LABEL \\\n--output-dir ./output\n</code></pre> <p>Python includes a traditional C-style parser <code>getopt</code>, but there's a more convenient way to define and parse command line  arguments using <code>argparse</code>.</p>"},{"location":"cli/#argparse","title":"argparse","text":""},{"location":"cli/#defining-command-line-arguments","title":"defining command line arguments","text":"<p>To define command line arguments, first import the <code>argparse</code> module and create  an instance of  <code>argparse.ArgumentParser</code> </p> <pre><code>import argparse\n\nparser = argparse.ArgumentParser()\n</code></pre> <p>Now, you can add your arguments to the <code>parser</code> object by calling  <code>parser.add_argument</code></p> <pre><code>parser = argparse.ArgumentParser()\nparser.add_argument('--hostname')\nparser.add_argument('--project')\nparser.add_argument('--label')\nparser.add_argument('--output-dir')\n</code></pre>"},{"location":"cli/#parsing-the-command-line","title":"parsing the command line","text":"<p>To parse the command line arguments entered by the user, simply call <code>parser.parse_args</code></p> <pre><code>args = parser.parse_args()\n</code></pre>"},{"location":"cli/#accessing-the-command-line-arguments","title":"accessing the command line arguments","text":"<p>Each command line argument is automatically converted into a property on the  object returned by <code>parse_args()</code>. The name of the property is similar but  not identical to the name of the argument that was declared. There are two  translation rules to remember</p> <ul> <li>Remove any leading dashes e.g., <code>-</code> or <code>--</code>, from the argument name</li> <li>Replace any embedded dash <code>-</code> within the argument name with an underscore <code>_</code></li> </ul> <pre><code>print(f'host is {args.hostname}')\nprint(f'project {args.project}')\nprint(f'label is {args.label}')\nprint(f'out_dir is {args.output_dir}')\n</code></pre>"},{"location":"conditional/","title":"Control flow","text":""},{"location":"conditional/#comparison-operators","title":"Comparison operators","text":"<p>Python provides all of the conventional relational operators to compare two  values</p> operator description <code>&lt;</code> less than <code>&gt;</code> greater than <code>==</code> is equal to <code>!=</code> is not equal to <code>&lt;=</code> less than or equal to <code>&gt;=</code> greater than or equal to <p>Examples include</p> <pre><code>1 &lt; 2\n2 &gt; 1\n1 == 1\n1 != 2\n2 &lt;= 3\n3 &gt;= 2\n</code></pre> <p>These will return a <code>bool</code> result.</p>"},{"location":"conditional/#boolean-operators","title":"Boolean operators","text":"<p>Also referred to as logical operators, boolean operators are used to create  conjunctions</p> operator desription logic symbol <code>and</code> logical and <code>p \u2227 q</code> <code>or</code> logical or <code>p \u2228 q</code> <code>not</code> logical not <code>\u00acp</code> <p>Some examples include</p> <pre><code>2 &gt; 1 and 2 &lt; 3\nTrue or False\nTrue and not False\n</code></pre> <p>These will return a <code>bool</code> result.</p>"},{"location":"conditional/#truthiness-of-values","title":"Truthiness of values","text":"<p>Python will interpret empty values as <code>False</code> and non-empty values as <code>True</code>.  For example, it's common to execute a block of code if a <code>list</code> is empty. One  way to do this would be</p> <pre><code>a = []\n\nif len(a) == 0:\n    print('the list is empty')\n</code></pre> <p>However, since Python will interpret an empty list as <code>False</code> you can do the  following instead</p> <pre><code>if not a:\n    print('the list is empty')\n</code></pre> <p>Other values that evaluate to <code>False</code> include an empty string <code>''</code>, an empty  dictionary <code>{}</code>, the integer value <code>0</code>, the float value <code>0.0</code>, an empty tuple  <code>()</code>, an empty set <code>set()</code>, and <code>None</code>.</p>"},{"location":"conditional/#exercises","title":"Exercises","text":"<p>Exercise 1</p> <p>Play around with conditional operators. Specifically, you should try  comparing two strings with the less-than or greater-than operators. </p>"},{"location":"dict/","title":"Data Structures","text":""},{"location":"dict/#dictionaries","title":"Dictionaries","text":"<p>Dictionaries are data structures that allow you to define custom indexes or keys.</p> <p>In other languages, dictionaries are referred to as hash maps, hash  tables, or associative arrays.</p> <p>Dictionaries begin and end with curly braces <code>{}</code> and each key/value pair  is separated by a comma <code>,</code>. You define keys and their corresponding  values separated by a colon <code>:</code></p> <pre><code>a = {\n  'name': 'Guido van Rossum',\n  'yob': 1956\n}\n</code></pre>"},{"location":"dict/#indexing","title":"Indexing","text":"<p>You can index into a dictionary using the defined keys, which is often easier  and more robust than having to remember numeric indexes </p> <pre><code>a['name']\na['yob']\n</code></pre>"},{"location":"dict/#insert","title":"Insert","text":"<p>Use the assignment operator <code>=</code> to insert new items into an existing dictionary </p> <pre><code>a['job title'] = 'BDFL'\n</code></pre>"},{"location":"dict/#update","title":"Update","text":"<p>Use the assignment operator <code>=</code> to update dictionary items</p> <pre><code>a['job title'] = None\n</code></pre>"},{"location":"dict/#delete","title":"Delete","text":"<p>Use the <code>del</code> keyword to delete items from a dictionary</p> <pre><code>del a['job title']\n</code></pre>"},{"location":"files/","title":"Reading and writing files","text":""},{"location":"files/#reading-a-file","title":"Reading a file","text":"<p>To read a file, open the file using the built-in  <code>open()</code> function and call the <code>.read()</code> method on the resulting file object</p> <pre><code>fo = open('file.txt')\n\ncontent = fo.read()\n</code></pre> <p>To close the file, call the <code>.close()</code> method</p> <pre><code>fo.close()\n</code></pre>"},{"location":"files/#character-encoding","title":"character encoding","text":"<p>Calling <code>open()</code> on a file without any additional arguments will assume the  file being opened is a text file containing a UTF-8 encoded string. If you  know that is not the case, you need to open the file in read binary mode  by passing <code>rb</code> as the second argument</p> <pre><code>fo = open('file.txt', 'rb')\n</code></pre> <p>Calling the <code>.read()</code> method on the resulting file object will now yield a  byte-string. To decode this byte-string, you must call <code>.decode()</code> with the  correct character encoding as the first argument</p> <pre><code>content = content.decode('UTF-8')\n</code></pre> <p>UTF-8 is quite common and backwards compatible with ASCII, but is  certainly not the only character encoding.</p>"},{"location":"files/#writing-a-file","title":"Writing a file","text":"<p>The process for writing a file is similar to reading. Simply open the file  using the built-in <code>open()</code> function, however you need to open the file in  write mode by passing <code>w</code> as the second argument</p> <pre><code>fo = open('file.txt', 'w')\n\nfo.write('Hello, World!\\n')\n</code></pre> <p>It's more important to call <code>.close()</code> after writing a file to ensure that  the write buffer has been flushed to disk</p> <pre><code>fo.close()\n</code></pre>"},{"location":"files/#appending-to-a-file","title":"Appending to a file","text":"<p>Appending content to an existing file requires opening the file in  append mode by passing <code>a</code> as the second argument</p> <pre><code>fo = open('file.txt', 'a')\n\nfo.write(another line')\n\nfo.close()\n</code></pre>"},{"location":"files/#file-context-manager","title":"File context manager","text":"<p>Forgetting to call <code>.close()</code> is a common mistake. Fortunately, the file  object returned by <code>open()</code> supports the  context manager interface. To use a context manager, you wrap the function call in a  <code>with</code> statement</p> <pre><code>with open('file.txt', 'w') as fo:\n    fo.write('Hello, World!\\n')\n</code></pre> <p>The benefit is that as soon as you dedent the <code>with</code> block, the file will be  closed.</p>"},{"location":"files/#csv-files","title":"CSV files","text":"<p>We'll take a moment to explore the <code>csv</code> module for reading a CSV file. To begin using the <code>csv</code> module, import it </p> <pre><code>import csv\n</code></pre>"},{"location":"files/#reading-csv-basic","title":"Reading CSV (basic)","text":"<p>Suppose this is the CSV file we're trying to read</p> <pre><code>Subject,Metric 1,Metric 2\nSubject_001,1,1\nSubject_002,2,0\nSubject_003,3,1\n</code></pre> <p>We would open this CSV file using <code>open()</code> function, then pass the resulting  file object to <code>csv.reader()</code>. This will return a CSV reader object</p> <pre><code>fo = open('file.csv')\n\nreader = csv.reader(fo)\n</code></pre> <p>Since an open CSV reader object is iterable, you can loop over it row-by-row  using a <code>for</code> loop</p> <pre><code>for row in reader:\n    print(row)\n</code></pre> <p>This loop will print the following text to the console. As shown here, each row  is parsed and returned as a <code>list</code></p> <pre><code>['Subject', 'Metric 1', 'Metric 2']\n['Subject_001', '1', '1']\n['Subject_002', '2', '0']\n['Subject_003', '3', '1']\n</code></pre>"},{"location":"files/#dictionary-reader","title":"Dictionary reader","text":"<p>The first row of a CSV file usually contains column headers. It's useful to  to combine each row with the column headers so that you can retrive items using  dictionary-based indexing. The <code>csv.DictReader</code> can do this for you</p> <pre><code>fo = open('file.csv')\nreader = csv.DictReader(fo)\nfor row in reader:\n    print(row['Metric 1'])\n</code></pre> <p>Pandas</p> <p>You should also check out  <code>pandas</code> which has even more advanced CSV parsing and querying capabilities.</p>"},{"location":"for/","title":"Control flow","text":""},{"location":"for/#the-for-loop","title":"The <code>for</code> loop","text":"<p>A <code>for</code> loop allows the same block of code to be executed multiple times</p> <pre><code>for item in iterable:\n    code to be executed\n</code></pre>"},{"location":"for/#iteration","title":"Iteration","text":"<p>Many of the data structures we've reviewed are defined as iterables in Python. Suppose we have a list of scan information where each item in the  list contains a <code>dict</code> of scan properties</p> <pre><code>scans = [\n    {\n        'num': 1,\n        'type': 'LOCALIZER',\n    },\n    {\n        'num': 2,\n        'type': 'MEMPRAGE'\n    },\n    {\n        'num': 3,\n        'type': 'BOLD'\n    },\n    {\n        'num': 4,\n        'type': 'BOLD'\n    }\n]\n</code></pre> <p>If you want to retrieve the scan numbers for all <code>BOLD</code> scans, you could use a  <code>for</code> loop to iterate over <code>scans</code> and call the same block of code to populate  a list of scan numbers</p> <pre><code>numbers = []\n\nfor scan in scans:\n    if scan['type'] == 'BOLD':\n        numbers.append(scan['num'])\n\nprint(numbers)\n</code></pre> <p>This will print the result <code>[3, 4]</code>.</p>"},{"location":"for/#iterating-over-a-dictionary","title":"Iterating over a dictionary","text":"<p>It's common to iterate over a <code>dict</code>, however there are some subtle differences. By default, when you iterate over a <code>dict</code> you'll only receive  its keys</p> <pre><code>a = {\n    'key1': 1,\n    'key2': 2,\n    'key3': 3\n}\n\nfor key in a:\n    value = a[key]\n    print(value)\n</code></pre> <p>If you want to iterate over the <code>dict</code> returning both the <code>key</code> and <code>value</code>  pairs, you would use the following syntax</p> <pre><code>for key,value in a.items():\n    print('key =', key, 'value =', value)\n</code></pre> <p>The <code>.items()</code> method on a dictionary will return all key/value pairs as a  list of tuples. The <code>for</code> loop shown above is unpacking each tuple into the separate variables for <code>key</code> and <code>value</code>.</p>"},{"location":"formats/","title":"DICOM and NIFTI","text":"<p>In this section, we're going to look at two Python libraries for  interacting with common neuroimaging file formats <code>pydicom</code>  and <code>nibabel</code>.</p> <p>Use a virtual environment</p> <p>To have full control over installing the packages described in this  section, follow the virtual environment tutorial.</p>"},{"location":"formats/#dicom","title":"DICOM","text":"<p>DICOM is perhaps the most popular imaging file format used within the medical  imaging community. One of the more popular Python packages for reading and  writing DICOM files is <code>pydicom</code>.</p> <p>You'll need to install <code>numpy</code> for more advanced functionality.</p> <pre><code>pip install pydicom numpy\n</code></pre>"},{"location":"formats/#reading-a-file","title":"reading a file","text":"<p>To read a DICOM file into variable named <code>ds</code>, use  <code>dcmread()</code></p> <pre><code>import pydicom\n\nds = pydicom.dcmread('file.dcm')\n</code></pre> <p>Lazy loading</p> <p>The <code>pydicom.dcmread()</code> function will only read the DICOM file headers  until you attempt to access the pixel data. This design choice saves  time and computational resources.</p>"},{"location":"formats/#reading-headers","title":"reading headers","text":"<p>DICOM headers are identified by their <code>group</code> and <code>element</code>. Some example  headers include</p> Name group element Study Date 0008 0020 Study Time 0008 0030 Patient Name 0010 0010 Series Number 0020 0011 Accession Number 0008 0050 Instance ID 0020 0013 Study UID 0020 000D Series UID 0020 000E <p>You can access these headers by indexing into the <code>ds</code> object using a tuple of  <code>( group, element )</code>. To access the Patient Name for example, you would use</p> <pre><code>element = ds[( '0010', '0010' )]\n</code></pre> <p>In the example above, the returned <code>element</code> will be an instance of  <code>pydicom.dataelem.DataElement</code>. Use the <code>value</code> property to access the value  of this element</p> <pre><code>patientname = element.value\n</code></pre>"},{"location":"formats/#reading-pixel-data","title":"reading pixel data","text":"<p>To read the DICOM pixel data as a series of bytes, you can access the  <code>PixelData</code> property</p> <pre><code>pixels = ds.PixelData\n</code></pre> <p>To receive the pixel data as a more useful <code>numpy</code> array, use the <code>pixel_array</code>  property</p> <pre><code>pixels = ds.pixel_array\n</code></pre>"},{"location":"formats/#visualizing-pixel-data","title":"visualizing pixel data","text":"<p>Let's take a look at matplotlib to visualize DICOM pixel data. First, you need to install <code>matplotlib</code></p> <pre><code>pip install matplotlib\n</code></pre> <p>Now, import <code>matplotlib.pyplot</code> and use <code>imshow()</code> to render the pixel data (a NumPy <code>ndarray</code>) as an image</p> <pre><code>import matplotlib.pyplot as plt\n\nplt.imshow(ds.pixel_array)\n\nplt.show()\n</code></pre>"},{"location":"formats/#nifti","title":"NIfTI","text":"<p>For reading and writing NIFTI files, use the  <code>nibabel</code> package</p> <pre><code>pip install nibabel\n</code></pre>"},{"location":"formats/#reading-a-file_1","title":"reading a file","text":"<p>To read a NIFTI file, use <code>nibabel.load()</code></p> <pre><code>import nibabel\n\nds = nibabel.load('file.nii.gz')\n</code></pre>"},{"location":"formats/#reading-headers_1","title":"reading headers","text":"<p>The NIFTI file headers are stored in a <code>header</code> property on the <code>ds</code> object.  Since the <code>header</code> property behaves like a dictionary, you can use a <code>for</code>  loop to iterate over all the headers</p> <pre><code>formatter = f'header = {header} value = {value}'\n\nfor header,value in ds.header.items():\n    print(formatter)\n</code></pre>"},{"location":"formats/#reading-pixel-data_1","title":"reading pixel data","text":"<p>The <code>.get_fdata()</code> method will return the NIfTI pixel data as a NumPy array</p> <pre><code>pixels = ds.get_fdata()\n</code></pre> <p>Memory efficiency</p> <p>The <code>ds.get_fdata()</code> method has many excellent features for handling large  images efficiently. For more details, read the official documentation here.</p>"},{"location":"formats/#visualizing-pixel-data_1","title":"visualizing pixel data","text":"<p>Let's take a look at matplotlib to visualize NIfTI pixel data. First, you need to install <code>matplotlib</code></p> <pre><code>pip install matplotlib\n</code></pre> <p>Now, import <code>matplotlib.pyplot</code> and use <code>imshow()</code> to render image <code>50</code> along the z-axis</p> <pre><code>import matplotlib.pyplot as plt\n\nfdata = ds.get_fdata()\n\nplt.imshow(fdata[:,:,50])\n\nplt.show()\n</code></pre>"},{"location":"functions/","title":"Functions","text":"<p>Batteries included</p> <p>The Python documentation includes an excellent tour of the standard library.</p> <p>This tutorial has made use of several built-in Python functions already, including  <code>type()</code>, <code>set()</code>, <code>len()</code>, and <code>range()</code>.</p>"},{"location":"functions/#positional-arguments","title":"positional arguments","text":"<p>The simplest form of a function call takes one or more positional arguments.  For example, the <code>sorted()</code> function can be called with only a single positional argument</p> <pre><code>a = [ 3, 1, 5, 4, 2]\n\nsorted(a)\n</code></pre> <p>This function will return a sorted version of the input list <code>[ 1, 2, 3, 4, 5 ]</code>.</p>"},{"location":"functions/#keyword-arguments","title":"keyword arguments","text":"<p>If you read through the documentation for the <code>sorted()</code> function, you'll see that it can accept two more keyword arguments</p> <pre><code>def sorted(iterable, key=None, reverse=False)\n</code></pre> <p>These arguments are optional since they've been defined with the default values  <code>None</code> and <code>False</code>. You can however override either of these arguments by  referencing it by keyword. For example, you can pass <code>reverse=True</code> to  reverse the sort order</p> <pre><code>sorted(a, reverse=True)\n</code></pre>"},{"location":"functions/#defining-a-function","title":"Defining a function","text":"<p>Functions are defined using the  <code>def</code> keyword, followed by the name of the function, followed by a comma separated  list of arguments within parentheses <code>()</code></p> <pre><code>def my_function(a, b, c)\n</code></pre> <p>This is known as a function signature.</p>"},{"location":"functions/#implementing-a-function","title":"Implementing a function","text":"<p>The function's implementation should exist within an indented block directly  below the function signature. You must append a colon <code>:</code> to the end of the  function signature</p> <pre><code>def function(a, b, c):\n    print('a is', a)\n    print('b is', b)\n    print('c is', c)\n</code></pre> <p>Now you can invoke this function like any other function from the standard  libary</p> <pre><code>function(1, 2, 3)\n</code></pre> <p>This will print the following text to the console</p> <pre><code>a is 1\nb is 2\nc is 3\n</code></pre>"},{"location":"functions/#defining-keyword-arguments","title":"defining keyword arguments","text":"<p>Positional arguments are always declared first in a function signature. These  arguments will be required to invoke the function. If you'd like to define  any optional arguments, those must be declared after the positional  arguments using the <code>keyword=default</code> syntax</p> <pre><code>def function(a, b=8, c=16):\n    print('a is', a)\n    print('b is', b)\n    print('c is', c)\n</code></pre> <p>Given the function definition above, <code>a</code> is required, <code>b</code> is optional (with a  default value <code>8</code>), and <code>c</code> is optional (with a default value <code>16</code>). When  calling this function, if you wish to override any of these optional keyword  arguments, you can refer to them by keyword</p> <pre><code>function(1, c=3)\n</code></pre> <p>This would print the following text to the console</p> <pre><code>a is 1\nb is 8\nc is 3\n</code></pre>"},{"location":"functions/#returning-values","title":"Returning values","text":"<p>Often times you will want your function to manipulate some input data and return a computed result. This is accomplished using a <code>return</code> statement</p> <pre><code>def function(a, b, c):\n    return (a + b) / c\n</code></pre> <p>If your function has a return value, you can store that value within a variable  using the assignment operator <code>=</code></p> <pre><code>result = function(1, 2, 3)\n</code></pre>"},{"location":"if/","title":"Control flow","text":"<p>Indentation is important</p> <p>Python uses indentation or the  off-side rule to declare a block of code. A code block is considered open on indent and closed on dedent.</p>"},{"location":"if/#the-if-condition","title":"The <code>if</code> condition","text":"<p>The general syntax of an <code>if</code> statement in Python is</p> <pre><code>if condition:\n  code to execute if True\n</code></pre> <p>In the example below, since <code>a == 10</code> evaluates to <code>True</code> the indented block  of code will be executed</p> <pre><code>a = 10\n\nif a == 10:\n  print('condition is True')\n</code></pre>"},{"location":"if/#the-else-clause","title":"The <code>else</code> clause","text":"<p>If you want to execute a different block of code if the evaluated condition  returns <code>False</code>, you would use an <code>else</code> clause</p> <pre><code>if a == 0:\n  print('condition is True')\nelse:\n  print('condition is False')\n</code></pre>"},{"location":"if/#the-elif-clause","title":"The <code>elif</code> clause","text":"<p>We can further complicate this <code>if</code> statement with an <code>elif</code>, short for  else if</p> <pre><code>if a == 0:\n  print('a is equal to 0')\nelif a == 10:\n  print('a is equal to 10')\nelse:\n  print('a is not equal to 0 or 10')\n</code></pre>"},{"location":"learn/","title":"Machine learning","text":"<p>scikit-learn is one of many excellent machine learning libraries for Python.</p> <p>Use a virtual environment</p> <p>To have full control over installing the packages described within this section, consider using virtual environment demonstrated here.</p>"},{"location":"learn/#installation","title":"Installation","text":"<p>Use <code>pip</code> to install <code>scikit-learn</code></p> <pre><code>pip install scikit-learn\n</code></pre> <p>The name of the module is <code>sklearn</code></p> <pre><code>import sklearn\n</code></pre>"},{"location":"learn/#iris-data-set","title":"Iris data set","text":"<p>One of the canonical examples within the machine learning community is  classifying Iris plants from various petal and sepal features. This is  such a common example in fact, the Iris data set is included within <code>sklearn</code>. All you have to do is import the <code>datasets</code> module and load it</p> <pre><code>from sklearn import datasets\n\niris = datasets.load_iris()\n</code></pre> <p>The Iris data set contains 150 examples of Iris plant. There are 50 examples  of 3 classes, or targets \u2014 setosa, versicolour, and virgincia. Each  example contains 4 different measurements, or features \u2014 sepal length,  sepal width, petal length, and petal width.</p> <p>The <code>sklearn</code> data set contains the features in <code>iris.data</code> and the  corresponding classes are found within <code>iris.target</code>.</p>"},{"location":"learn/#building-a-classifier","title":"Building a classifier","text":"<p>In this example, we'll build a  Decision Tree classifier to predict Iris plants from petal and sepal features. First, we'll  load the  <code>tree</code> module</p> <pre><code>from sklearn import tree\n</code></pre> <p>Next, we'll create a  <code>DecisionTreeClassifer</code> with a maximum depth of 2</p> <pre><code>classifier = tree.DecisionTreeClassifier(max_depth=2)\n</code></pre>"},{"location":"learn/#fitting-data-training","title":"Fitting data (training)","text":"<p>We can train our classifier on the data set using the  <code>fit</code> method</p> <pre><code>classifier = classifier.fit(iris.data, iris.target)\n</code></pre>"},{"location":"learn/#visualizing-the-classifer","title":"Visualizing the classifer","text":"<p>Before moving on to prediction, let's visualize our classifier using the  <code>export_text</code> function from <code>sklearn.tree</code></p> <pre><code>from sklearn.tree import export_text\n\ntext = export_text(classifier, feature_names=iris['feature_names'])\n\nprint(text)\n</code></pre> <p>You should see the following output</p> <pre><code>|--- petal length (cm) &lt;= 2.45\n|   |--- class: 0\n|--- petal length (cm) &gt;  2.45\n|   |--- petal width (cm) &lt;= 1.75\n|   |   |--- class: 1\n|   |--- petal width (cm) &gt;  1.75\n|   |   |--- class: 2\n</code></pre> <p>Class names for this example can be found in <code>iris['target_names']</code>.</p>"},{"location":"learn/#prediction","title":"Prediction","text":"<p>Given an unseen input feature vector <code>[ 1.0, 1.0, 2.5, 1.75 ]</code> you can  predict its class using the <code>.predict()</code> method on our new model</p> <pre><code>classifier.predict([[ 1.0, 1.0, 2.5, 1.75 ]])\n</code></pre> <p>This should return class <code>1</code>. If you manually run this input vector through the  Decision Tree rules yourself, you can verify that this is correct.</p>"},{"location":"list/","title":"Data structures","text":""},{"location":"list/#lists","title":"Lists","text":"<p>Also known as arrays in other languages, a <code>list</code> in Python begins and ends  with square brackets <code>[]</code> and individual items are separated with a comma <code>,</code></p> <p>Spaces don't matter here.</p> <pre><code>a = [ 1, 2, 3, 4 ]\n</code></pre> <p>Do I need to specify the size of the list in advance</p> <p>No. Since Python is interpreted and  garbage collected  there's no need to explicitly allocate memory, free memory, or declare the  size of a <code>list</code> in advance.</p> <p>You can store any type of data in a list</p> <pre><code>a = [ 'Hello', 'World!' ]\n</code></pre> <p>You can even store multiple types of data, including other lists</p> <pre><code>a = [\n  1.0,\n  'Hello, World!',\n  [ 5.0, True, None ]\n]\n</code></pre> <p>Split up long lines</p> <p>In the example below, you'll see a list printed with each item on a separate  line. It's considered good practice to split lines at 80 characters for readability.</p>"},{"location":"list/#indexing","title":"Indexing","text":"<p>Retrieving items from a list is called indexing or subscripting. Let's  revisit the list from earlier</p> <pre><code>a = [\n  1.0,\n  'Hello, World!',\n  [ 5.0, True, None ]\n]\n</code></pre> <p>The indexes are as follows</p> index value type 0 <code>1.0</code> <code>float</code> 1 <code>'Hello, World!'</code> <code>str</code> 2 <code>[ 5.0, True, None ]</code> <code>list</code> <p>In Python, list indexes start at <code>0</code> and increment to the length of the  list minus <code>1</code>. Let's retrieve a few items</p> <pre><code>a[0]\na[1]\na[2]\n</code></pre>"},{"location":"list/#insert","title":"Insert","text":"<p>Python has a few different ways to insert new items into an existing list.  More commonly, you will use the <code>.insert()</code> method. This method accepts two arguments. The first argument is a list  index and the second argument is the value you want to insert at that index </p> <pre><code>a.insert(0, 'foobar')\n</code></pre> <p>This will insert the string <code>foobar</code> at index <code>0</code>, pushing all subsequent  items forward.</p>"},{"location":"list/#update","title":"Update","text":"<p>Use the assignment operator <code>=</code> to update an item at a specific index</p> <pre><code>a[1] = 999\n</code></pre> <p>This will replace the value at index <code>1</code> with the integer value <code>999</code>.</p>"},{"location":"list/#delete","title":"Delete","text":"<p>Use the <code>del</code> keyword to delete an item from a list</p> <pre><code>del a[1]\n</code></pre> <p>This will delete the value at index <code>1</code> and shift all subsequent items back. </p> <p>Read the documentation</p> <p>Refer to the official documentation here for all available list operations.</p>"},{"location":"list/#length","title":"Length","text":"<p>To see the length of a list, pass it to the built-in <code>len()</code> function</p> <pre><code>len(a)\n</code></pre> <p>This function will return an <code>int</code>.</p>"},{"location":"list/#exists","title":"Exists","text":"<p>To check whether or not a specific value exists within a given list, use the  <code>in</code> keyword</p> <pre><code>20 in a\n</code></pre> <p>This statement will return a <code>bool</code>.</p>"},{"location":"list/#slicing","title":"Slicing","text":"<p>Slicing is a powerful feature built into Python. If you've ever used C or  Matlab, the syntax should be familiar. Let's define a list containing the  numbers <code>0</code> through <code>20</code> using the built-in <code>range()</code> function</p> <p>For <code>range()</code> to return all numbers from <code>1</code> to <code>20</code>, you have to specify  that you want numbers from <code>1</code> to <code>21</code>.</p> <pre><code>a = list(range(1, 21))\n</code></pre> <p>Slice syntax is defined using <code>start:end[:step]</code> where <code>step</code> is optional. If  you want to retrieve the first 10 items, you would specify the following slice</p> <pre><code>a[0:10]\n</code></pre> <p>If you omit the <code>start</code> index, it will default to <code>0</code></p> <pre><code>a[:10]\n</code></pre> <p>Add a colon <code>:</code> and specify a step value of <code>2</code> to get every other item</p> <pre><code>a[:20:2]\n</code></pre> <p>If you don't know the length of the <code>list</code>, omit the <code>end</code> index to default to  the maximum length</p> <pre><code>a[::2]\n</code></pre> <p>For more advanced information, visit the official documentation  here</p>"},{"location":"math/","title":"Math operators","text":"<p>Python has fairly conventional mathematical operators for addition <code>+</code>,  subtraction <code>-</code>, multiplication <code>*</code>, division <code>/</code>, and exponents <code>**</code>. </p> <p>To demonstrate these, let's define two variables <code>a</code> and <code>b</code> and execute some  basic arithmetic operations</p> <pre><code>a = 1\nb = 10\n\na + b\na - b\na * b\na / b\nb ** 2\n</code></pre> <p>Dividing two <code>int</code> types returns a <code>float</code></p> <p>If you're familiar with languages like C or Python 2, you might be  surprised to find that Python 3 returns a <code>float</code> even when you  divide two <code>ints</code>. </p>"},{"location":"math/#exercises","title":"Exercises","text":"<p>Exercise 1</p> <p>Play around with types and arithmetic expressions on your own. Define  variables, run arithmetic expressions, and explore what happens if you  multiply e.g., a <code>str</code> with an <code>int</code>.</p>"},{"location":"modules/","title":"Importing and using modules","text":"<p>The following section will explore how to tap into the rest of the Python standard library  by way of importing modules.</p>"},{"location":"modules/#the-os-module","title":"The <code>os</code> module","text":"<p>The  <code>os</code> module provides functions that allow you to interact with the  operating system. To begin using functions from the <code>os</code> module, you need to  import it</p> <pre><code>import os\n</code></pre>"},{"location":"modules/#joining-paths","title":"Joining paths","text":"<p><code>os.path.join</code> allows you to combine strings with the appropriate path separator</p> <pre><code>os.path.join('/path/to/data/', 'sub-001', 'ses-001')\n</code></pre> <p>This function call will return the path <code>/path/to/data/sub-001/ses-001</code>.</p>"},{"location":"modules/#listing-a-directory","title":"Listing a directory","text":"<p><code>os.listdir</code> will list directory contents, similar to the <code>ls</code> utility from  GNU coreutils</p> <pre><code>for entry in os.listdir('.'):\n    print(entry)\n</code></pre>"},{"location":"modules/#walking-a-directory","title":"Walking a directory","text":"<p>If you want to crawl over a directory and each subdirectory from the command  line, you would likely run a command like <code>ls -R</code> or <code>find</code>. In Python, you  could use <code>os.walk</code></p> <pre><code>for root, dirs, files in os.walk('.'):\n    for file in files:\n        fullfile = os.path.join(root, file)\n        print(fullfile)\n</code></pre>"},{"location":"modules/#table-of-shell-commands","title":"Table of shell commands","text":"<p>Here's a quick list of commonly used Python functions and their corresponding  GNU/Linux commands</p> Linux command Python function <code>cd</code> <code>os.chdir</code> <code>pwd</code> <code>os.getcwd</code> <code>chmod</code> <code>os.chmod</code> <code>chown</code> <code>os.chown</code> <code>rm</code> <code>os.remove</code> <code>mv</code> <code>os.rename</code>"},{"location":"modules/#the-shutil-module","title":"The <code>shutil</code> module","text":"<p>Similar to the <code>os</code> module,  <code>shutil</code> contains more high-level functions for interacting with files and directories</p> <pre><code>import shutil\n</code></pre>"},{"location":"modules/#copying-a-file","title":"Copying a file","text":"<p>To copy a file, you should use  <code>shutil.copy2</code>.  This function accepts the source and destination files</p> <pre><code>shutil.copy2('/path/source.txt', '/path/destination.txt')\n</code></pre> <p>Python contains several functions for copying a file. There's <code>copy</code>, <code>copyfile</code>,  and <code>copy2</code>. <code>copy2</code> may be preferred under most circumstances since it preserves file  metadata. </p>"},{"location":"modules/#copying-a-directory","title":"Copying a directory","text":"<p>To copy an entire directory tree, you would typically use the <code>cp -R</code> commnad. In  Python, you can use  <code>shutil.copytree</code>. This function accepts the source and destination directories</p> <pre><code>shutil.copytree('/path/source', '/path/destination')\n</code></pre>"},{"location":"modules/#deleting-a-directory","title":"Deleting a directory","text":"<p>To delete an entire directory from the command line, you would typically use  <code>rm -r</code> and say a quick prayer. In Python, you would use  <code>shutil.rmtree</code>. This function accepts the directory to delete</p> <p>Destructive command</p> <p>You will not be asked for confirmation. Use at your own risk.</p> <pre><code>shutil.rmtree('/please/be/careful')\n</code></pre>"},{"location":"modules/#from-x-import-y","title":"<code>from x import y</code>","text":"<p>Instead of importing a module and calling a function</p> <pre><code>import os\n\nos.listdir()\n</code></pre> <p>you can use a <code>from</code> statement to import only the function you need</p> <pre><code>from os import listdir\n\nlistdir()\n</code></pre>"},{"location":"nipype/","title":"Nipype","text":""},{"location":"nipype/#why-nipype","title":"Why Nipype?","text":"<ol> <li>Pulls most neuroimaging software packages into one tool. Choose and combine functions from different packages.</li> <li>Free and open-source.</li> <li>Caches past runs of workflow, and re-runs accordingly.</li> <li>Easy parallelization.</li> </ol>"},{"location":"nipype/#installation","title":"Installation","text":"<p>Let's create a virtual environment (pop quiz!) in which to install nipype and its friends.</p> <pre><code># 1. set-up and activate virtual env\nmodule load miniconda3/py39_4.11.0-ncf\npython -m venv nipype39_venv\nsource nipype39_venv/bin/activate\n\n# 2. install nipype and friends\npip install nipype pytest sphinx networkx==3.0 nibabel==2.0.4\n\n# 3. test install\npython -c \"import nipype; print(nipype.__version__)\"\npython -c \"import nipype; nipype.test()\"\n# You will probably get warnings, but make sure you don't have any errors or fails.\n</code></pre> <p>To access the full code of nipype_spm1stlevel.py (LINK)</p>"},{"location":"nipype/#interface-node-workflow","title":"Interface, Node, Workflow","text":"<p>A nipype pipeline is composed of 3 differently \"sized\" objects, from smallest to largest: 1. Interfaces, 2. Nodes, and 3. Workflows</p> <p></p>"},{"location":"nipype/#interfaces-functions-for-fun-pipelines","title":"Interfaces: Functions for fun pipelines!","text":"<p>(Sorry I couldn't help myself.)</p> <p>Interfaces are Python functions that wrap the magical (mostly neuroimaging) tools from other software packages (e.g., fslmaths from FSL or recon-all from Freesurfer)</p> <p>Like modules, interfaces aren't Python built-ins, so their modules must be imported at the beginning of your Python script (lines 1-13 of nipype_spm1stlevel.py LINK): <pre><code>from nipype.interfaces import fsl, spm\n</code></pre> Then, we can call things that we imported as, for example: <code>spm.EstimateContrast()</code></p>"},{"location":"nipype/#nodes-happy-package-for-an-interface","title":"Nodes: Happy package for an interface","text":"<p>Nodes contain the wrapped interfaces, but also: 1. inputs (including input files, or any specified paramaters), and 2. outputs.</p> <p>Let's choose a simple example: Freesurfer's mri_convert.</p> <p>To create a node: <pre><code>from nipype.pipeline import engine as pe\n\nnodeVariableName = pe.Node(package.function(), name=\"nameForOutputDirectory\")\n</code></pre></p> <p>For example (lines 138-161 of nipype_spm1stlevel.py): <pre><code>convert = pe.Node(freesurfer.MRIConvert(), name=\"convert\")\n\n# now we can set the inputs\nconvert.inputs.in_file = 'structural.nii.gz'\nconvert.inputs.out_type = 'nii'\n</code></pre></p>"},{"location":"nipype/#mapnode","title":"MapNode","text":"<p>Now in the mri_convert example above, we had a Node which took a single input (1 volume) and a single output (1 volume), but in reality, you might have a bunch of images that need to be converted, but then reconverge as a single list (of multiple volumes) when it's passed on to another node. Then you'll need a MapNode.</p> <p></p> <p>Lines 140-142 of nipype_spm1stlevel.py: <pre><code>convert = pe.MapNode(freesurfer.MRIConvert(), name=\"convert\", iterfield=['in_file'])\nconvert.inputs.in_file = funcFiles # more on how I made this object later\nconvert.inputs.out_type = 'nii'\n</code></pre></p>"},{"location":"nipype/#iterfield","title":"Iterfield","text":"<p>The <code>iterfield</code> entry is not limited to files or to MapNodes. You could use it for any input. For instance, if you're doing smoothing and want to try a bunch of different kernels, this input parameter could go in the iterfield. Or if you're doing a second level analysis over many contrasts, this could also go in the iterfield.</p> <p></p> <p>A hypothetical example: <pre><code>smooth = pe.Node(spm.Smooth(), name=\"smooth\", iterfield=['fwhm'])\nsmooth.inputs.fwhm = [[2, 2, 2],[4, 4, 4]]\n</code></pre></p>"},{"location":"nipype/#identitynode-to-iterate-over-participants-or-sessions","title":"IdentityNode: To iterate over participants (or sessions)","text":"<p>One quirk of iterfield is that it only works for input fields. So this is fine for iterating over files or smoothing kernels, or contrasts, but it won't work for iterating over subjects or sessions. Instead, you'll need to use an IdentityInterface (link)</p> <p><pre><code>subject_list = ['01','02']\ninfosource = Node(IdentityInterface(fields=['subject_id']),\n              name=\"infosource\")\ninfosource.iterables = [('subject_id', subject_list)]\n</code></pre> The only difference is that you'll have to implement BIDSDataGrabber in a Node:</p> <pre><code>from nipype.interfaces.io import BIDSDataGrabber\n\ngrabber = Node(BIDSDataGrabber(), name='bidsgrabber')\ngrabber.inputs.base_dir = BIDSDir\n</code></pre> <p>And in a moment, we'll see how to pass the infosource subject_list to your grabber node.</p>"},{"location":"nipype/#workflow-connecting-nodes-and-passing-data","title":"Workflow: Connecting nodes and passing data","text":"<p>Workflows are the biggest \"thing\" in nipype. It links a series of nodes.</p>"},{"location":"nipype/#to-create-a-workflow-lines-166-167","title":"To create a workflow (lines 166-167):","text":"<pre><code>l1analysis = pe.Workflow(name='nipype_1stlevel')\nl1analysis.base_dir = os.path.join(baseDir, outDir)\n</code></pre> <p>The important property of workflows is that it links the nodes. In the above Node and MapNode examples, we gave the node its input, but if we really want to use Nipype, one node is going to pass its output to another node's input.</p>"},{"location":"nipype/#to-connect-nodes-in-a-workflow","title":"To connect nodes in a workflow","text":"<p>So after we make our nodes, we can connect them and tell the workflow which output should go to which input. The basic format is:</p> <pre><code>workflowname.connect([(node1name, node2name, [('node1outputparameter','node2inputparameter')] )])\n</code></pre> <p>For example (lines 172-175): <pre><code>l1analysis.connect([(convert, modelspec, [('out_file', 'functional_runs')]),\n                    (modelspec, level1design, [('session_info', 'session_info')]),\n                    (level1design, level1estimate, [('spm_mat_file', 'spm_mat_file')]),\n                    (level1estimate, contrastestimate, [('spm_mat_file', 'spm_mat_file'),\n                                                        ('beta_images', 'beta_images'),\n                                                        ('residual_image','residual_image')])])\n</code></pre></p>"},{"location":"nipype/#to-run-a-workflow-lines-197-199","title":"To run a workflow (lines 197-199):","text":"<p>There are several options for how to run your workflow. <pre><code>l1analysis.run(plugin='MultiProc',plugin_args={'n_procs':2})\nl1analysis.write_graph()\n</code></pre> You can run with other plugins, but FASSE seems to like this best.</p>"},{"location":"nipype/#getting-data-in-and-out-of-your-pipeline","title":"Getting data in and out of your pipeline","text":"<p>There are many ways to get your data in and out of a nipype workflow, but my favorites are BIDSLayout and datasync.</p>"},{"location":"nipype/#data-in-bidslayout","title":"Data in: BIDSLayout","text":"<p>BIDSLayout is from pybids (not nipype), but if your data in already in BIDS format (which it should be :), I find this to be the easiest way to grab imaging data.</p> <p>For instance, to grab your fMRIPrep-ed functional files: <pre><code>layout = BIDSLayout(BIDSDir, derivatives=True, validate=False)\nfuncFiles = layout.get(datatype='func', subject=subName,\n                       task=task, session=sesName, space=space,\n                       suffix='bold', extension='nii.gz',\n                       return_type='filename')\n</code></pre> Anything that's specified in a <code>thing-spec</code> (e.g., <code>direction-AP</code>) format in your BIDS-compliant file name is fair game. Also, note that if you want something from your raw data directory (aka <code>bids</code> as opposed to the <code>bids/derivatives</code> directory), set <code>derivatives=False</code>.</p>"},{"location":"nipype/#data-out-datasink","title":"Data out: DataSink","text":"<p>Nipype automatically outputs all the outputs of each node to its own directory, but it can be a bit messy, especially for MapNodes or Nodes with iterfields (e.g., nipype_1stlevel/convert/mapflow/_convert0/out_file.nii).</p> <p></p> <p>But a DataSink Node lets you choose which files you want and their organizational structure.</p> <p>So first, you make your DataSink Node like any other Node (line 183-184):</p> <pre><code>datasink = pe.Node(nio.DataSink(), name=\"datasink\")\ndatasink.inputs.base_directory = os.path.join(baseDir,outDir)\n</code></pre> <p>Then you connect any outputs you like to datasink. Notice that the <code>grumpy.@cat</code> structure; it will create a folder called grumpy and name the files with the cat prefix. If you just put a regular string, it will put the files in a directory of that name (like the SPM.mat files below)</p> <pre><code>l1analysis.connect([(contrastestimate, datasink,[('con_images', 'contrasts.@con'),\n                                                 ('spmT_images', 'contrasts.@T')]),\n                    (level1estimate, datasink,[('spm_mat_file', 'spm_mat')])])\n</code></pre> <p></p>"},{"location":"nipype/#another-output-workflow-graph","title":"Another output: Workflow graph","text":"<p>One other nice feature of Nipype is that it automatically gives you a nice figure showing the connected graph of your nodes. It will be in the main output directory, called graph.png</p> <p>For example: </p>"},{"location":"nipype/#running-your-nipype-script-and-accessing-software-packages","title":"Running your nipype script (and accessing software packages)","text":"<p>Nipype is providing functions which Python-ize access to tools that may be written in another language, but not the tools themselves. You still need to <code>module load</code> (if on FASSE) or install the software packages.</p> <p>The tricky thing is that we can't load the modules in any permanent way from within Python. If you're on FASSE, I suggest having a separate script that loads the necessary modules and then calls the Python script. (Example script: run_spm1stlevel.sh LINK)</p> <pre><code>#!/bin/bash\n# if running on SLURM, could put all your #SBATCH lines here...\n\nmodule load ncf\nmodule load matlab/R2020b-fasrc01\nmodule load spm/12.7487-fasrc01\nmodule load freesurfer/6.0.0-ncf\nmodule load fsl/6.0.4-ncf\n\npython nipype_spm1stlevel.py\n</code></pre> <p>Then you would run this as: <pre><code>sh run_spm1stlevel.sh\n</code></pre></p> <p>or if you're running on SLURM <pre><code>sbatch run_spm1stlevel.sh\n</code></pre></p>"},{"location":"print/","title":"Print and string formatting","text":"<p>One of the most tried and true debugging tools is <code>print</code>.</p> <p>Make liberal use of <code>print</code> to output text from your programs that  would be useful for troubleshooting and monitoring progress.</p>"},{"location":"print/#simple-use-case","title":"Simple use case","text":"<p>You can pass any value to <code>print</code> that can be represented as a string</p> <p>Most types of data in Python can be represented as a string.</p> <pre><code>print('Hello, World!')\nprint(1)\nprint(3.14)\nprint(True)\nprint(None)\nprint([ 1, 2, 3 ])\n</code></pre>"},{"location":"print/#string-formatting","title":"String formatting","text":"<p>Format strings allow you to create more complex strings containing plain text  and existing variables.</p> <p>Read the documentation</p> <p>String formatting is a whole mini-language  within the Python language itself. I suggest referring to the  official documentation  for more.</p>"},{"location":"print/#basic-example","title":"Basic example","text":"<p>You define a format string like a any other string, except you must prefix the  string with a <code>f</code>. Within the format string, you can use curly braces <code>{}</code>  to reference a variable</p> <pre><code>a = 'World'\nprint(f'Hello, {a}!')\n</code></pre> <p>In this example, Python will substitute the placeholder <code>{a}</code> with the value  from the variable <code>a</code> which will result in the string <code>Hello, World!</code>.</p>"},{"location":"print/#real-world-example","title":"Real world example","text":"<p>Format strings are sometimes used to dynamically build shell commands. For example</p> <pre><code>files = [\n    ['subject_a.dcm', 'subject_a.nii.gz'],\n    ['subject_b.dcm', 'subject_b.nii.gz'],\n    ['subject_c.dcm', 'subject_c.nii.gz']\n]\n\nfor infile, outfile in files:\n    command = f'mri_convert {infile} {outfile}'\n    print(command)\n</code></pre> <p>This will print the following shell commands </p> <pre><code>mri_convert subject_a.dcm subject_a.nii.gz\nmri_convert subject_b.dcm subject_b.nii.gz\nmri_convert subject_c.dcm subject_c.nii.gz\n</code></pre>"},{"location":"print/#rounding-floats","title":"Rounding <code>floats</code>","text":"<p>It's common for a developer to specify how a <code>float</code> value should be displayed  within a formatted string. To do this, you can add a format specifier to your  placeholder using <code>{variable:specifier}</code> syntax.</p> <p>For example, if you want your format string to round the variable <code>pi</code> to 4  decimal places, you would append <code>0.4f</code> to <code>pi</code></p> <pre><code>pi = 3.1415926\nprint(f'\u03c0 rounded to 4 decimal places is {pi:0.4f}')\n</code></pre> <p>For more information on format specifiers, refer to the official documentation  here.</p>"},{"location":"recommendations/","title":"Recommendations","text":"<p>Here's a brief list of recommended Python packages.</p>"},{"location":"recommendations/#pipenv","title":"pipenv","text":"<p>There is no universally accepted toolchain for building Python applications in a simple  (nevermind deterministic) way. I've  tried a few different offerings but ultimately landed on  pipenv.</p>"},{"location":"recommendations/#requests","title":"requests","text":"<p>If you need to make HTTP requests, you should check out  requests.  I would like to add that this is perhaps one of the best API designs in the Python ecosystem.</p>"},{"location":"recommendations/#vcrpy","title":"vcrpy","text":"<p>If you ever need to mock out HTTP responses for testing, I've tried a bunch and landed on vcrpy.</p>"},{"location":"recommendations/#flask","title":"flask","text":"<p>Need a web application by the end of the day? Try  flask.</p>"},{"location":"recommendations/#mkdocs","title":"mkdocs","text":"<p>Writing documentation? Already know (or want to learn) Markdown? Try  mkdocs.</p>"},{"location":"set/","title":"Data Structures","text":""},{"location":"set/#sets","title":"Sets","text":"<p>Sets allow you to accumulate items without duplicates. A set begins and ends  with curly braces <code>{}</code> and each item is separated by a comma <code>,</code></p> <p>Spaces don't matter here.</p> <pre><code>a = { 1, 1, 2, 1, 2, 2 }\n</code></pre> <p>Note that even though we've added multiple instances of <code>1</code> and <code>2</code>, the set  object only contains a single instance of <code>1</code> and <code>2</code>.</p> <pre><code>&gt;&gt;&gt; print(a)\n{1, 2}\n</code></pre>"},{"location":"set/#alternate-syntax","title":"Alternate syntax","text":"<p>Unfortunately, Python also uses curly braces <code>{}</code> to define sets and  dictionaries. The following will create an empty dictionary</p> <pre><code>a = {}\n</code></pre> <p>To create an empty set, you need to use the  <code>set()</code> function without any arguments</p> <pre><code>a = set()\n</code></pre>"},{"location":"set/#set-operations","title":"Set operations","text":"<p>The set data type supports many conventional set operations. You can find the  <code>union</code>, <code>intersection</code>, and <code>difference</code> between two sets using the following  methods</p> <pre><code>a = { 1, 2, 3, 4, 5 }\nb = { 1, 5, 6, 7, 8 }\na.intersection(b)       # intersection\na.difference(b)         # difference\na.union(b)              # union\n</code></pre>"},{"location":"set/#adding-and-removing-items","title":"Adding and removing items","text":"<p>You can add and remove items from a set using the <code>add</code> and <code>remove</code>  methods</p> <pre><code>a.add(10)\na.remove(2)\n</code></pre>"},{"location":"set/#indexing","title":"Indexing","text":"<p>Sets, which are inherently unordered collections, do not support indexing.</p>"},{"location":"subprocess/","title":"Subprocesses","text":"<p>Many neuroimaging analysis tools are implemented as a command line tool that  does one thing and does it well. The  <code>subprocess</code> module makes running command line tools simple.</p> <pre><code>import subprocess\n</code></pre>"},{"location":"subprocess/#running-a-subprocess","title":"Running a subprocess","text":"<p>A simple way to run a subprocess is with <code>subprocess.check_output</code>. The first argument will be your command and the second argument will be  <code>shell=True</code></p> <pre><code>output = subprocess.check_output('ls -la', shell=True)\n\nprint(output.decode())\n</code></pre> <p><code>string.decode()</code></p> <p>Python will no longer assume a character encoding for strings that are read in from files or generated by subprocesses. You're responsible for always calling <code>.decode()</code> with the known character  encoding, which defaults to UTF-8.</p>"},{"location":"subprocess/#handling-errors","title":"Handling errors","text":"<p>If a subprocess fails, you'll receive a  <code>subprocess.CalledProcessError</code>. An unhandled exception will typically crash your program. If you want  to catch the error and handle it in a particular way, you can  enclose the function call within a  <code>try statement</code></p> <pre><code>try:\n    output = subprocess.check_output('ls -z', shell=True)\nexcept subprocess.CalledProcessError as e:\n    print(e.returncode)\n</code></pre>"},{"location":"tuple/","title":"Data Structures","text":""},{"location":"tuple/#tuples","title":"Tuples","text":"<p>Tuples are effectively an immutable list. Once a tuple has been defined, you cannot add, update, or delete items  from it. A tuple begins and ends with parentheses <code>()</code> and items are separated  by a comma <code>,</code></p> <p>Spaces don't matter here.</p> <pre><code>a = ( 1, 2, 3 )\n</code></pre>"},{"location":"tuple/#indexing","title":"Indexing","text":"<p>Like other  iterable types in Python, you can index and slice tuples</p> <pre><code>a[0]\na[1]\na[::2]\n</code></pre>"},{"location":"tuple/#unpacking","title":"Unpacking","text":"<p>Often used in <code>for</code> loops, you can unpack a tuple into individual variables</p> <pre><code>a, b, c = ( 1, 2, 3 )\n</code></pre> <p>In this case <code>a = 1</code>, <code>b = 2</code>, and <code>c = 3</code>. Remember this pattern as it often  appears in code and documentation.</p>"},{"location":"tuple/#immutability","title":"Immutability","text":"<p>The immutability property of a tuple is desirable under some  circumstances. For example, only immutable types in Python can be  hashed and only hashable types can be used as dictionary keys. For example, this is perfectly legal code</p> <pre><code>a = {\n    ( 'StudyA', 'Subject1' ): [ 'Session1', 'Session2' ],\n    ( 'StudyA', 'Subject2' ): [ 'Session3', 'Session4' ],\n    ( 'StudyB', 'Subject1' ): [ 'Session5', 'Session6' ]\n}\n</code></pre> <p>Note that you cannot hash a tuple if it contains a mutable type.</p> <p>and subsequently you can retrieve an item from this dictionary using  <code>('StudyA','Subject2')</code></p> <pre><code>a[( 'StudyA', 'Subject2' )]\n</code></pre>"},{"location":"virtualenv/","title":"Virtual environments","text":"<p>Virtual environments will allow you to install and try out as many different  Python packages as possible. </p>"},{"location":"virtualenv/#creating-a-virtual-environment","title":"Creating a virtual environment","text":"<p>To create a virtual environment, execute the following shell command</p> <pre><code>% python -m venv test\n</code></pre> <p>This will create a directory named <code>test</code>.</p>"},{"location":"virtualenv/#activating-your-virtual-environment","title":"Activating your virtual environment","text":"<p>To activate your virtual environment, execute the following shell command</p> <pre><code>% source test/bin/activate\n</code></pre> <p>You're now using an isolated/sandboxed Python installation under the <code>test</code>  directory. </p> <p>You should notice that <code>which python</code> now points to the Python executable  that resided within your virtual environment.</p>"},{"location":"virtualenv/#deactivate","title":"deactivate","text":"<p>To deactivate the virtual environment, execute the <code>deactivate</code> shell command</p> <pre><code>(test) % deactivate\n</code></pre> <p>You should notice that <code>which python</code> now points to the system installed  Python executable. </p>"},{"location":"virtualenv/#pip","title":"<code>pip</code>","text":"<p>The main package installer for Python is <code>pip</code>.</p>"},{"location":"virtualenv/#upgrade-pip","title":"upgrade pip","text":"<p>For the rest of this tutorial, you should only run <code>pip</code> from within an  activated virtual environment. Before you proceed any further, you should  upgrade <code>pip</code></p> <pre><code>(test) % pip install --upgrade pip\n</code></pre> <p>Now you can install external packages such as <code>pydicom</code></p> <pre><code>(test) % pip install pydicom\n</code></pre>"},{"location":"virtualenv/#dependency-management","title":"dependency management","text":"<p>You may notice that when you install an external package such as <code>pydicom</code>,  this triggers the installation of additional packages. This creates a  dependency graph. If we were to explore the dependency graph for the  <code>yaxil</code> library, you would see the following</p> <p>The following graph was rendered with <code>pipenv</code></p> <pre><code>yaxil==0.4.3\n  - arrow [required: Any, installed: 0.15.5]\n    - python-dateutil [required: Any, installed: 2.8.1]\n      - six [required: &gt;=1.5, installed: 1.14.0]\n  - lxml [required: Any, installed: 4.5.0]\n  - pyaml [required: Any, installed: 19.12.0]\n    - PyYAML [required: Any, installed: 5.3]\n  - pydicom [required: Any, installed: 1.4.1]\n  - requests [required: Any, installed: 2.22.0]\n    - certifi [required: &gt;=2017.4.17, installed: 2019.11.28]\n    - chardet [required: &gt;=3.0.2,&lt;3.1.0, installed: 3.0.4]\n    - idna [required: &gt;=2.5,&lt;2.9, installed: 2.8]\n    - urllib3 [required: &gt;=1.21.1,&lt;1.26,!=1.25.1,!=1.25.0, installed: 1.25.8]\n  - six [required: Any, installed: 1.14.0]\n</code></pre> <p>You can see that <code>yaxil</code> depends on <code>arrow</code>, <code>lxml</code>, <code>pydicom</code>, <code>requests</code>,  and <code>six</code> and in turn, each of those dependencies have their own dependencies.</p> <p>Diving deeper, you'll see that <code>arrow</code> depends on <code>python-dateutil</code> which  in turn depends on <code>six &gt;= 1.5</code>. Coincidentally, <code>yaxil</code> also depends on <code>six</code>  and will accept <code>Any</code> version. But what if it didn't? If these two packages  had conflicting requirements, there would be a dependency conflict.</p>"},{"location":"while/","title":"Control of flow","text":""},{"location":"while/#the-while-loop","title":"The <code>while</code> loop","text":"<p>A <code>while</code> loop will execute the same block of code until a specified  condition returns <code>True</code>. For example</p> <pre><code>a = 0\n\nwhile a &lt;= 10:\n    print('a is', a)\n    a += 1\n</code></pre>"},{"location":"while/#the-infinite-loop","title":"The infinite loop","text":"<p>A common convention for creating an infinite loop is to use a <code>while</code> loop  given a condition that will never return <code>False</code></p> <p>Stopping an infinite loop</p> <p>The example below will print <code>Hello, World!</code> continuously until  you hit Control + C</p> <pre><code>while True:\n    print('Hello, World!')\n</code></pre>"}]}